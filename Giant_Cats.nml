
switch (FEAT_OBJECTS, SELF, switch_cat_1, [
		// We store the offset into the spriteset due to the tile slope into the 1st temporary variable
		STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
		// We store the offset to the flat groundsprite we use into the 2nd temporary variable
		STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
		STORE_TEMP(terrain_type == TILETYPE_DESERT      ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
		STORE_TEMP(terrain_type == TILETYPE_SNOW        ? GROUNDSPRITE_SNOW   : LOAD_TEMP(1), 1),
		1
		]) {
	switch_spritelayout_cat_1;
}

spriteset(spriteset_cat_1_thumb, "gfx/empty.png") { template_empty() }
alternative_sprites(spriteset_cat_1_thumb, ZOOM_LEVEL_IN_4X, BIT_DEPTH_32BPP, "gfx/cat_1_thumb.png") {[
	0, 0, 256, 134, -128, 0 ]}
spritelayout spritelayout_cat_1_thumb { ground { sprite: LOAD_TEMP(0) + LOAD_TEMP(1); } building { sprite: spriteset_cat_1_thumb; } }

// calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_cat_1_purchase, [
		//use flat gound sprite for purchase menu
		STORE_TEMP(0, 0),
		//use normal terrain for purchase menu
		STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
		]) {
	spritelayout_cat_1_thumb;
}

item (FEAT_OBJECTS, item_cat_1) {
	property {
		class:					"CATS";
		classname:				string(STR_CAT_CLASSNAME);
		name:					string(STR_CAT_1);
		climates_available:		ALL_CLIMATES;
		size:					[14,11];
		build_cost_multiplier:	4;
		remove_cost_multiplier: 4;
		introduction_date:		date(1890,1,1);
		end_of_life_date:		0xFFFFFFFF;
		object_flags:			bitmask(OBJ_FLAG_REMOVE_IS_INCOME, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ON_WATER, OBJ_FLAG_DRAW_WATER);
		height:					4;
		num_views:				1;
		count_per_map256:		2;
	}
	graphics {
		default:			switch_cat_1;
		purchase:			switch_cat_1_purchase;
		autoslope:			return(CB_RESULT_AUTOSLOPE);
		additional_text:	string(STR_CAT_1_INFO);
	}
}

switch (FEAT_OBJECTS, SELF, switch_cat_2, [
		// We store the offset into the spriteset due to the tile slope into the 1st temporary variable
		STORE_TEMP(slope_to_sprite_offset(tile_slope), 0),
		// We store the offset to the flat groundsprite we use into the 2nd temporary variable
		STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
		STORE_TEMP(terrain_type == TILETYPE_DESERT      ? GROUNDSPRITE_DESERT : LOAD_TEMP(1), 1),
		STORE_TEMP(terrain_type == TILETYPE_SNOW        ? GROUNDSPRITE_SNOW   : LOAD_TEMP(1), 1),
		1
		]) {
	switch_spritelayout_cat_2;
}

spriteset(spriteset_cat_2_thumb, "gfx/empty.png") { template_empty() }
alternative_sprites(spriteset_cat_2_thumb, ZOOM_LEVEL_IN_4X, BIT_DEPTH_32BPP, "gfx/cat_2_thumb.png") {[
	0, 0, 221, 256, -110, -100 ]}
spritelayout spritelayout_cat_2_thumb { ground { sprite: LOAD_TEMP(0) + LOAD_TEMP(1); } building { sprite: spriteset_cat_2_thumb; } }

// calculate ground sprite for purchase menu
switch (FEAT_OBJECTS, SELF, switch_cat_2_purchase, [
		//use flat gound sprite for purchase menu
		STORE_TEMP(0, 0),
		//use normal terrain for purchase menu
		STORE_TEMP(GROUNDSPRITE_NORMAL, 1),
		]) {
	spritelayout_cat_2_thumb;
}

item (FEAT_OBJECTS, item_cat_2) {
	property {
		class:					"CATS";
		classname:				string(STR_CAT_CLASSNAME);
		name:					string(STR_CAT_2);
		climates_available:		ALL_CLIMATES;
		size:					[15,14];
		build_cost_multiplier:	4;
		remove_cost_multiplier: 4;
		introduction_date:		date(1890,1,1);
		end_of_life_date:		0xFFFFFFFF;
		object_flags:			bitmask(OBJ_FLAG_REMOVE_IS_INCOME, OBJ_FLAG_ALLOW_BRIDGE, OBJ_FLAG_ON_WATER, OBJ_FLAG_DRAW_WATER);
		height:					4;
		num_views:				1;
		count_per_map256:		2;
	}
	graphics {
		default:			switch_cat_2;
		purchase:			switch_cat_2_purchase;
		autoslope:			return(CB_RESULT_AUTOSLOPE);
		additional_text:	string(STR_CAT_2_INFO);
	}
}
